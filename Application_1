import React, { useState, useCallback, useEffect } from "react";
import { Plus, Sun, Moon } from "lucide-react";

// Custom Button component
const Button = ({ onClick, disabled, className, size = "default", variant = "default", children }) => {
  const baseClasses = "inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none";
  const sizeClasses = {
    default: "h-10 py-2 px-4",
    sm: "h-8 px-3 text-xs",
    lg: "h-11 px-8"
  };
  const variantClasses = {
    default: "bg-blue-600 text-white hover:bg-blue-700",
    secondary: "bg-gray-200 text-gray-900 hover:bg-gray-300",
    outline: "border border-gray-300 bg-transparent text-gray-800 hover:bg-gray-100",
    ghost: "bg-transparent text-gray-800 hover:bg-gray-100",
    spotify: "bg-green-600 text-white hover:bg-green-700"
  };
  
  return (
    <button
      onClick={onClick}
      disabled={disabled}
      className={`${baseClasses} ${sizeClasses[size]} ${variantClasses[variant]} ${className || ''}`}
    >
      {children}
    </button>
  );
};

// Card components
const Card = ({ className, children }) => {
  return (
    <div className={`rounded-lg border shadow-sm bg-white border-gray-200 text-gray-900 ${className || ''}`}>
      {children}
    </div>
  );
};

const CardContent = ({ className, children }) => (
  <div className={`p-6 ${className || ''}`}>
    {children}
  </div>
);

// Input component
const Input = ({ className, onChange, value, placeholder, onKeyDown }) => {
  return (
    <input
      onChange={onChange}
      value={value}
      placeholder={placeholder}
      onKeyDown={onKeyDown}
      className={`flex h-10 w-full rounded-md border border-input px-3 py-2 text-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring bg-white border-gray-300 text-gray-900 focus-visible:ring-blue-400 ${className}`}
    />
  );
};

// Progress component
const Progress = ({ value, className, indicatorClassName }) => {
  return (
    <div className={`h-2 w-full overflow-hidden rounded-full bg-gray-200 ${className || ''}`}>
      <div
        className={`h-full transition-all ${value === 100 ? 'bg-green-500' : value > 0 ? 'bg-blue-500' : 'bg-gray-300'} ${indicatorClassName || ''}`}
        style={{ width: `${value}%` }}
      />
    </div>
  );
};

// HabitProgress specifically for habits
const HabitProgress = ({ value }) => {
  return <Progress value={value} />;
};

// HabitItem component
const HabitItem = ({ habit, onToggleHabit, onDeleteHabit }) => {
  return (
    <li className={`flex flex-col sm:flex-row sm:items-center justify-between px-4 py-3 rounded-xl transition-all duration-300 mb-3 ${habit.done ? "bg-green-100 border border-green-200 text-green-900" : "bg-white border border-gray-300 hover:shadow-sm text-gray-800"}`}>
      <div className="flex items-center w-full">
        <span className="flex-grow truncate text-sm sm:text-base font-medium transition-all duration-300">
          {habit.name}
          {habit.streak > 0 && (
            <span className="ml-2 text-xs font-semibold px-2 py-0.5 rounded-full transition-colors duration-300 bg-orange-100 text-orange-700">
              {habit.streak} day{habit.streak > 1 ? 's' : ''}
            </span>
          )}
        </span>
        <div className="flex space-x-2">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => onToggleHabit(habit.id)}
            className={`rounded-full px-4 py-1 text-xs font-medium transition-all duration-300 ${
              habit.done ? "bg-green-500 hover:bg-green-600 text-white transform hover:scale-105" : "bg-indigo-500 hover:bg-indigo-600 text-white transform hover:scale-105"
            }`}
          >
            {habit.done ? "✓" : "Mark"}
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => onDeleteHabit(habit.id)}
            className="rounded-full px-2 py-1 text-xs font-medium text-red-600 hover:bg-red-100"
          >
            ×
          </Button>
        </div>
      </div>
      <div className="w-full sm:w-1/3 mt-2 sm:mt-0 sm:ml-10">
        <HabitProgress value={habit.done ? 100 : 0} />
      </div>
    </li>
  );
};

// Main HabitTracker component
export default function HabitTracker() {
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [habits, setHabits] = useState(() => {
    const savedHabits = localStorage.getItem('habits');
    if (savedHabits) {
      try {
        return JSON.parse(savedHabits);
      } catch (e) {
        console.error("Failed to parse saved habits", e);
        return [];
      }
    }
    
    // Mock data for initial load if no saved habits
    return [
      {
        id: "habit-1",
        name: "Morning Meditation",
        done: false,
        streak: 5,
        lastCompleted: null
      },
      {
        id: "habit-2",
        name: "Read for 30 minutes",
        done: false,
        streak: 3,
        lastCompleted: null
      },
      {
        id: "habit-3",
        name: "Exercise",
        done: false,
        streak: 0,
        lastCompleted: null
      }
    ];
  });
  
  const [newHabitName, setNewHabitName] = useState("");
  
  // Save habits to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem('habits', JSON.stringify(habits));
  }, [habits]);
  
  // Check if it's a new day and reset habits if needed
  useEffect(() => {
    const checkForNewDay = () => {
      const lastCheckDate = localStorage.getItem('lastCheckDate');
      const today = new Date().toDateString();
      
      if (lastCheckDate && lastCheckDate !== today) {
        // It's a new day, update streaks and reset completion status
        setHabits(prevHabits => prevHabits.map(habit => ({
          ...habit,
          done: false,
          // If the habit was completed yesterday, increase streak, otherwise reset
          streak: habit.done ? habit.streak + 1 : 0,
          lastCompleted: habit.done ? new Date().toISOString() : habit.lastCompleted
        })));
      }
      
      localStorage.setItem('lastCheckDate', today);
    };
    
    checkForNewDay();
    
    // Check for new day when app gains focus
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible') {
        checkForNewDay();
      }
    };
    
    document.addEventListener('visibilitychange', handleVisibilityChange);
    
    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, []);
  
  const toggleDarkMode = useCallback(() => {
    setIsDarkMode(prev => !prev);
  }, []);
  
  const addHabit = useCallback(() => {
    if (!newHabitName.trim()) return;
    const newHabit = {
      id: `habit-${Date.now()}`,
      name: newHabitName.trim(),
      done: false,
      streak: 0,
      lastCompleted: null
    };
    setHabits(prev => [...prev, newHabit]);
    setNewHabitName("");
  }, [newHabitName]);
  
  const toggleHabit = useCallback((habitId) => {
    setHabits(prevHabits => prevHabits.map(habit => 
      habit.id === habitId 
        ? { 
            ...habit, 
            done: !habit.done,
            lastCompleted: !habit.done ? new Date().toISOString() : habit.lastCompleted
          } 
        : habit
    ));
  }, []);
  
  const deleteHabit = useCallback((habitId) => {
    setHabits(prevHabits => prevHabits.filter(habit => habit.id !== habitId));
  }, []);
  
  const completedHabits = habits.filter(habit => habit.done).length;
  const progressPercentage = habits.length > 0 ? (completedHabits / habits.length) * 100 : 0;
  
  return (
    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? "bg-gray-900 text-gray-100" : "bg-gray-50 text-gray-900"} p-4 sm:p-8`}>
      <Card className={`max-w-2xl mx-auto ${isDarkMode ? "bg-gray-800 border-gray-700 text-gray-100" : "bg-white border-gray-200 text-gray-900"}`}>
        <CardContent>
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-2xl font-bold">Daily Habits</h1>
            <Button 
              variant={isDarkMode ? "outline" : "outline"} 
              size="sm"
              onClick={toggleDarkMode}
              className={isDarkMode ? "border-gray-600 text-gray-300" : ""}
            >
              {isDarkMode ? (
                <><Sun size={16} className="mr-1" /> Light</>
              ) : (
                <><Moon size={16} className="mr-1" /> Dark</>
              )}
            </Button>
          </div>
          
          <div className="mb-6">
            <p className={`text-sm ${isDarkMode ? "text-gray-400" : "text-gray-500"} mb-2`}>
              Today's Progress: {completedHabits}/{habits.length} habits completed
            </p>
            <Progress value={progressPercentage} />
          </div>
          
          <div className="space-y-4 mb-6">
            <div className="flex space-x-2">
              <Input
                placeholder="Add a new habit..."
                value={newHabitName}
                onChange={(e) => setNewHabitName(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === 'Enter') addHabit();
                }}
                className={`flex-1 ${isDarkMode ? "bg-gray-700 border-gray-600 text-gray-100" : ""}`}
              />
              <Button onClick={addHabit} disabled={!newHabitName.trim()}>
                <Plus size={16} className="mr-1" /> Add
              </Button>
            </div>
          </div>
          
          {habits.length === 0 ? (
            <div className="text-center py-8">
              <p className={`${isDarkMode ? "text-gray-400" : "text-gray-500"}`}>No habits yet. Add some to get started!</p>
            </div>
          ) : (
            <ul className="space-y-3">
              {habits.map(habit => (
                <HabitItem 
                  key={habit.id} 
                  habit={habit} 
                  onToggleHabit={toggleHabit}
                  onDeleteHabit={deleteHabit}
                />
              ))}
            </ul>
          )}
          
          <div className={`mt-6 pt-4 border-t text-center text-sm ${isDarkMode ? "border-gray-700 text-gray-400" : "border-gray-100 text-gray-500"}`}>
            Keep going! Consistency is the key to success.
          </div>
        </CardContent>
      </Card>
      
      <Button
        variant="secondary"
        size="sm"
        className={`fixed bottom-4 right-4 z-10 rounded-full shadow-lg px-4 py-2 flex items-center ${
          isDarkMode ? "bg-gray-700 text-gray-200 hover:bg-gray-600" : ""
        }`}
      >
        <span className="mr-2">Play Music</span>
      </Button>
    </div>
  );
}
